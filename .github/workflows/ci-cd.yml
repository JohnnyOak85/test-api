name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install Node.js and npm
        run: |
          curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
          sudo apt-get install -y nodejs

      - name: Install npm
        run: sudo npm install -g npm

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install Dependencies
        run: npm install

  deploy:
    runs-on: ubuntu-latest
    needs: build

    env:
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Create security-key.pem
        run: echo "$SSH_PRIVATE_KEY" > security-key.pem && chmod 600 security-key.pem

      - name: Set Permissions on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i security-key.pem ec2-user@ec2-3-253-33-5.eu-west-1.compute.amazonaws.com 'sudo chown ec2-user:ec2-user /etc/systemd/system/'
          ssh -o StrictHostKeyChecking=no -i security-key.pem ec2-user@ec2-3-253-33-5.eu-west-1.compute.amazonaws.com 'sudo chmod 755 /etc/systemd/system/'

      - name: Copy Service File
        run: |
          scp -v -o StrictHostKeyChecking=no -i security-key.pem $GITHUB_WORKSPACE/test-api.service ec2-user@ec2-3-253-33-5.eu-west-1.compute.amazonaws.com:/tmp/
          ssh -o StrictHostKeyChecking=no -i security-key.pem ec2-user@ec2-3-253-33-5.eu-west-1.compute.amazonaws.com 'sudo mv /tmp/test-api.service /etc/systemd/system/'

      - name: Deploy to EC2
        run: ssh -o StrictHostKeyChecking=no -i security-key.pem ec2-user@ec2-3-253-33-5.eu-west-1.compute.amazonaws.com 'cd test-api && git pull && npm install || true'

      - name: Reload systemd
        run: ssh -o StrictHostKeyChecking=no -i security-key.pem ec2-user@ec2-3-253-33-5.eu-west-1.compute.amazonaws.com 'sudo systemctl daemon-reload'

      - name: Check if the service is already enabled
        run: |
          is_enabled=$(ssh -o StrictHostKeyChecking=no -i security-key.pem ec2-user@ec2-3-253-33-5.eu-west-1.compute.amazonaws.com 'sudo systemctl is-enabled test-api.service' || true)
          echo "Is service enabled: $is_enabled"

      - name: Enable, start, or restart the service based on status
        run: |
          if [ "$is_enabled" != "enabled" ]; then
            echo "Service not enabled. Enabling and starting..."
            ssh -o StrictHostKeyChecking=no -i security-key.pem ec2-user@ec2-3-253-33-5.eu-west-1.compute.amazonaws.com 'sudo systemctl enable test-api.service'
            ssh -o StrictHostKeyChecking=no -i security-key.pem ec2-user@ec2-3-253-33-5.eu-west-1.compute.amazonaws.com 'sudo systemctl start test-api.service'
          else
            echo "Service already enabled. Restarting..."
            ssh -o StrictHostKeyChecking=no -i security-key.pem ec2-user@ec2-3-253-33-5.eu-west-1.compute.amazonaws.com 'sudo systemctl restart test-api.service'
          fi

      - name: Cleanup security-key.pem
        run: rm security-key.pem
